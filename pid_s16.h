/**********************************************************************************
**	ENVIROMENT VARIABILE
**********************************************************************************/

#ifndef PID_S16_H_
	#define PID_S16_H_

/**********************************************************************************
**	GLOBAL INCLUDES
**********************************************************************************/

/**********************************************************************************
**	DEFINES
**********************************************************************************/

//Floating point position of the PID
#define PID_GAIN_FP		8

/**********************************************************************************
**	MACROS
**********************************************************************************/

/**********************************************************************************
**	NAMESPACE
**********************************************************************************/

//! @namespace OrangeBot
namespace OrangeBot
{

/**********************************************************************************
**	TYPEDEFS
**********************************************************************************/

/**********************************************************************************
**	PROTOTYPE: STRUCTURES
**********************************************************************************/

/**********************************************************************************
**	PROTOTYPE: GLOBAL VARIABILES
**********************************************************************************/

/**********************************************************************************
**	PROTOTYPE: CLASS
**********************************************************************************/

/************************************************************************************/
//! @class 		Dummy
/************************************************************************************/
//!	@author		Orso Eric
//! @version	0.1 alpha
//! @date		2019-11-08
//! @brief		PID
//! @details
//!	Advanced PID Library \n
//! FEATURES:	\n
//!		Command Saturation	\n
//! Detect when command is saturated \n
//! This inibiths the integrator from growing, improving response time \n
//! This allow a detection of PID unlock when the command is saturated for too long, meaning the PID can't keep up \n
//! @pre		No prerequisites
//! @bug		None
//! @warning	No warnings
//! @copyright	License ?
//! @todo		todo list
/************************************************************************************/

class Pid_s16
{
	//Visible to all
	public:
		//--------------------------------------------------------------------------
		//	CONSTRUCTORS
		//--------------------------------------------------------------------------

		//! Default constructor
		Pid_s16( void );

		//--------------------------------------------------------------------------
		//	DESTRUCTORS
		//--------------------------------------------------------------------------

		//!Default destructor
		~Pid_s16( void );

		//--------------------------------------------------------------------------
		//	OPERATORS
		//--------------------------------------------------------------------------

		//--------------------------------------------------------------------------
		//	SETTERS
		//--------------------------------------------------------------------------

		//Set command saturation error and error handler
		bool register_error_handler( uint16_t sat_th, void *handler );

		//--------------------------------------------------------------------------
		//	GETTERS
		//--------------------------------------------------------------------------

		//--------------------------------------------------------------------------
		//	REFERENCES
		//--------------------------------------------------------------------------

		//PID limits
		int16_t &limit_cmd_max( void );
		int16_t &limit_cmd_min( void );
		uint16_t &limit_sat_th( void );

		//Set PID gain parameters
		int16_t &gain_kp( void );
		int16_t &gain_kd( void );
		int16_t &gain_ki( void );

		//--------------------------------------------------------------------------
		//	TESTERS
		//--------------------------------------------------------------------------

		//--------------------------------------------------------------------------
		//	PUBLIC METHODS
		//--------------------------------------------------------------------------

		//Execute a step of the PID controller
		int16_t exe( int16_t reference, int16_t feedback );
		//Execute a step of the PID controller. Give directly error.
		int16_t exe( int16_t err );

		//--------------------------------------------------------------------------
		//	PUBLIC STATIC METHODS
		//--------------------------------------------------------------------------

		//--------------------------------------------------------------------------
		//	PUBLIC VARS
		//--------------------------------------------------------------------------

	//Visible to derived classes
	protected:
		//--------------------------------------------------------------------------
		//	PROTECTED METHODS
		//--------------------------------------------------------------------------

		//--------------------------------------------------------------------------
		//	PROTECTED VARS
		//--------------------------------------------------------------------------

	//Visible only inside the class
	private:
		//--------------------------------------------------------------------------
		//	PRIVATE METHODS
		//--------------------------------------------------------------------------

		//! dummy method for easy copy
		bool dummy( void );

		//--------------------------------------------------------------------------
		//	PRIVATE VARS
		//--------------------------------------------------------------------------

			//!Error handler
		void *g_err_handler;

			//!Parameters
		//PID core gain parameters
		int16_t g_kp, g_kd, g_ki;
		//Command Saturation limits. Maximum command allowed
		int16_t g_cmd_max, g_cmd_min;
		//If command is saturated a number of cycle bigger than this number, a PID unlock error is issued. Zero means that the detection is inactive
		uint16_t g_sat_th;

			//!Memories
		//PID integral accumulator
		int16_t g_acc;
		//PID derivative memory buffer
		int16_t g_old_err;
		//Counter that stores the number of consecutive execution in which command is saturated
		uint16_t g_sat_cnt;

};	//End Class: Pid_s16

/**********************************************************************************
**	NAMESPACE
**********************************************************************************/

} //End Namespace

#else
    #warning "Multiple inclusion of hader file"
#endif
